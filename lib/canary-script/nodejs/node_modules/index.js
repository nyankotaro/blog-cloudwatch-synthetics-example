const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');
const { SecretsManagerClient, GetSecretValueCommand } = require('@aws-sdk/client-secrets-manager');

// Secrets Managerクライアントの設定
const region = process.env.REGION || 'ap-northeast-1';
const secretsManager = new SecretsManagerClient({ region });

// 検証用に環境変数からシークレットを取得（本番環境ではSecrets Managerを使用する）
const secret = {
  accountId: 'your-account-id',
  username: 'your-username',
  password: 'your-password',
};

// セッションクリア関数
const clearSession = async (page) => {
  try {
    if (page.isClosed()) {
      log.error('Page is already closed');
      return;
    }
    await page.deleteCookie(...(await page.cookies()));
    const client = await page.target().createCDPSession();
    await client.send('Network.clearBrowserCache');
    await client.send('Network.clearBrowserCookies');
    log.info('Session cleared successfully');
  } catch (error) {
    log.error(`Failed to clear session: ${error.message}`);
    throw error;
  }
};

// メイン処理関数
const executeFlow = async (page) => {
  const url = 'https://console.aws.amazon.com';
  const accountId = secret.accountId;
  
  synthetics.getConfiguration().setConfig({
    includeRequestHeaders: true,
    includeResponseHeaders: true,
    restrictedHeaders: [],
    restrictedUrlParameters: [],
  });

  // AWS コンソールにアクセス
  await synthetics.executeStep('navigateToAwsConsole', async () => {
    const response = await page.goto(url, {
      waitUntil: ['load', 'networkidle0'],
      timeout: 10000,
    });
    if (response.status() !== 200) {
      throw new Error(`Failed to load AWS Console. Status: ${response.status()}`);
    }
  });

  // ログインフォームの入力
  await synthetics.executeStep('inputAccountId', async () => {
    await page.waitForSelector('#account', { timeout: 5000 });
    await page.type('#account', accountId);
  });

  await synthetics.executeStep('inputUsername', async () => {
    await page.waitForSelector('#username', { timeout: 5000 });
    await page.type('#username', secret.username);
  });

  await synthetics.executeStep('inputPassword', async () => {
    await page.waitForSelector('#password', { timeout: 5000 });
    await page.type('#password', secret.password);
  });

  await synthetics.executeStep('clickSignIn', async () => {
    await page.waitForSelector('#signin_button', { timeout: 5000 });
    await page.click('#signin_button');
  });

  await synthetics.executeStep('verifyLogin', async () => {
    await page.waitForSelector('#console-nav-footer', { timeout: 10000 });
  });

  await synthetics.executeStep('verifyConsoleHome', async () => {
    await page.waitForFunction(
      () => document.body && document.body.innerText.includes('Console Home'),
      { timeout: 5000 }
    );
  });

  // ログアウト処理
  await synthetics.executeStep('openUserMenu', async () => {
    await page.waitForSelector('[data-testid="more-menu__awsc-nav-account-menu-button"]', { timeout: 10000 });
    await page.click('[data-testid="more-menu__awsc-nav-account-menu-button"]');
    
    // メニューが展開されるのを待つ
    await page.waitForFunction(() => {
      const button = document.querySelector('[data-testid="more-menu__awsc-nav-account-menu-button"]');
      return button && button.getAttribute('aria-expanded') === 'true';
    }, { timeout: 5000 });
  });

  await synthetics.executeStep('clickSignOut', async () => {
    await page.waitForSelector('[data-testid="aws-console-signout"]', { timeout: 5000 });
    await page.click('[data-testid="aws-console-signout"]');
  });

};

// リトライ処理を含むメイン関数
const flowBuilderBlueprint = async () => {
  const maxRetries = 2;
  const retryDelay = 5000;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      log.info(`Attempt ${attempt} of ${maxRetries}`);
      const page = await synthetics.getPage();
      await clearSession(page);
      await executeFlow(page);
      return;
    } catch (error) {
      log.error(`Attempt ${attempt} failed: ${error.message}`);
      if (attempt === maxRetries) throw error;
      log.info(`Retrying in ${retryDelay / 1000} seconds...`);
      await new Promise((resolve) => setTimeout(resolve, retryDelay));
    }
  }
};
exports.handler = async () => flowBuilderBlueprint();
